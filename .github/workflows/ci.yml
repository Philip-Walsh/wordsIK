name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"

jobs:
  # Build and validate
  build-and-validate:
    name: Build & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Lint TypeScript
        run: npm run lint:ts

      - name: Run tests
        run: npm test

      - name: Validate all content
        run: npm run validate-all

      - name: Validate translations (PR only)
        if: github.event_name == 'pull_request'
        run: npm run validate-translations

      - name: Generate validation report
        if: github.event_name == 'pull_request'
        run: |
          npm run validate-all -- --output markdown > validation-report.md
          npm run validate-translations -- --output markdown >> validation-report.md

      - name: Comment validation report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation-report.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Security checks
  security:
    name: Security & Secrets Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        run: |
          docker run --rm -v "$(pwd):/repo" trufflesecurity/trufflehog:latest filesystem --directory=/repo --only-verified --fail

  # Documentation and content validation
  docs-and-content:
    name: Documentation & Content Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Vale
        run: |
          wget https://github.com/errata-ai/vale/releases/latest/download/vale_2.28.0_Linux_64-bit.tar.gz
          tar -xzf vale_2.28.0_Linux_64-bit.tar.gz
          sudo mv vale /usr/local/bin/

      - name: Create Vale config
        run: |
          cat > .vale.ini << EOF
          StylesPath = .vale/styles
          [*.md]
          BasedOnStyles = Microsoft, write-good, proselint
          EOF

      - name: Run Vale
        run: vale docs/ *.md CONTRIBUTING.md

      - name: Spell check
        run: npx cspell "docs/**/*.md" "*.md"

      - name: Validate JSON files
        run: |
          echo "Checking JSON syntax..."
          find data/ -name "*.json" -exec sh -c 'echo "Validating $1"; python3 -m json.tool "$1" > /dev/null' _ {} \;

      - name: Run profanity check
        run: |
          echo "Running profanity checks..."
          for file in $(find data/ -name "*.json"); do
            echo "Checking $file"
            node validation/profanity-check.js "$file"
          done

      - name: Check for sensitive patterns
        run: |
          echo "Checking for sensitive patterns..."
          # Check for API keys, passwords, etc.
          if grep -r -i -E "(api_key|password|secret|token)" data/ --exclude-dir=node_modules; then
            echo "⚠️  Potential sensitive data found in content files"
            exit 1
          fi

      - name: Multilingual spell check
        run: |
          echo "Running multilingual spell checks..."
          npx cspell "data/**/*.json" --languageId en
          npx cspell "data/**/*.json" --languageId es
          npx cspell "data/**/*.json" --languageId fr

      - name: Validate language structure
        run: |
          echo "Validating language directory structure..."
          # Check that all language directories have consistent structure
          for lang in en es fr; do
            if [ -d "data/vocabulary/$lang" ]; then
              echo "✓ Found vocabulary for $lang"
            fi
            if [ -d "data/grammar/$lang" ]; then
              echo "✓ Found grammar for $lang"
            fi
            if [ -d "data/spelling/$lang" ]; then
              echo "✓ Found spelling for $lang"
            fi
          done

      - name: Check UTF-8 encoding
        run: |
          echo "Checking file encoding..."
          find data/ -name "*.json" -exec file {} \; | grep -v "UTF-8" && exit 1 || echo "✓ All files are UTF-8 encoded"

      - name: Validate translations
        run: |
          echo "Validating translation consistency..."
          # Basic check for translation field presence
          for file in $(find data/ -name "*.json"); do
            if grep -q '"translation"' "$file"; then
              echo "✓ $file has translation field"
            fi
          done

  # Final status check
  status:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [security, docs-and-content, build-and-validate]
    if: always()
    steps:
      - name: Check job status
        run: |
          echo "Checking overall pipeline status..."
          if [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.docs-and-content.result }}" != "success" ] || \
             [ "${{ needs.build-and-validate.result }}" != "success" ]; then
            echo "❌ One or more checks failed"
            exit 1
          else
            echo "✅ All checks passed"
          fi
